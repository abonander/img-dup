//! As a library crate, `img_dup` provides tools for searching for images, hashing them in
//! parallel, and collating their hashes to find near or complete duplicates.

extern crate img_hash;
extern crate image;
extern crate num_cpus;
extern crate rayon;
extern crate vec_vp_tree as vp_tree;

#[macro_use]
extern crate serde_derive;

mod img;
// pub mod serialize;

pub mod hash_types;
pub mod model;
pub mod search;

use img::HashSettings;

pub use img::{Image, ImgResults};

use std::path::PathBuf;

pub const DEFAULT_HASH_SIZE: u32 = 8;

/// A builder struct for bootstrapping an `img_dup` session.
pub struct Settings {
    pub dir: PathBuf,

    /// The size of the hash to use.
    ///
    /// See the `HashType` documentation for the actual size
    /// of a hash generated by each hash type.
    pub hash_size: u32,

    /// The type of the hash to use. See `HashType` for more information.
    pub hash_type: HashType,

    pub threads: u32,
}


